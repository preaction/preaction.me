<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>preaction</title>
        <link>http://preaction.me/blog/</link>
        <atom:link href="http://preaction.me/blog/index.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of preaction</description>
        <generator>Statocles 0.060</generator>
        <item>
            <title>ygrok - Parse plain text into data structures</title>
            <link>http://preaction.me/blog/2015/11/27/ygrok-parse-plain-text-into-data-structures/</link>
            <guid>http://preaction.me/blog/2015/11/27/ygrok-parse-plain-text-into-data-structures/</guid>
            <description><![CDATA[
                <p>As a data warehouse, a significant part of my job involves log analysis.
Besides the standard root cause analysis, I need to verify database
writes, diagnose user access issues, and look for under-used (and
over-used) data sets. Additionally, my boss needs quarterly and yearly
reports for client billing, and some of our clients need usage reports
to identify data they might be paying for but not using (which we can
then shut off to reduce costs). This has recently become a popular space
for new solutions.</p>

<p>On the other side, as a sysadmin, I need to get other reports like how
all the machine&#39;s resources (CPU, memory, disk, network) are being used,
what processes are running on the machine and how those processes used
resources over time. This is basic monitoring, and there are lots of
solutions here, too. In the true Unix philosophy, there are command-line
programs to query every one of these, which write out text that I can
then parse.</p>

<p>In <a href="http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html">my previous post about
ysql</a>, I showed how
to use the <code>ysql</code> utility to read/write YAML documents to SQL databases.
Now, <a href="http://preaction.me/yertl">Yertl</a> has a <a href="http://preaction.me/yertl/pod/ygrok"><code>ygrok</code>
utility</a> to parse plain text into YAML documents.</p>

                    <p><a href="http://preaction.me/blog/2015/11/27/ygrok-parse-plain-text-into-data-structures/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/yertl/">yertl</a>
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                </p>
            ]]></description>
            <pubDate>
                Fri, 27 Nov 2015 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>List::Slice - Slice operations for lists</title>
            <link>http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/</link>
            <guid>http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/</guid>
            <description><![CDATA[
                <p>How many times have you needed to do this?</p>

<pre><code>my @found_names = grep { /^[A-D]/ } @all_names;
my @topfive = @found_names[0..4];
</code></pre>

<p>Or worse, this.</p>

<pre><code>my @topfive = ( grep { /^[A-D]/ } @all_names )[0..4];
</code></pre>

<p><img alt="There&#39;s got to be a better way" src="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/cheetos.gif"></p>

<p>Or this.</p>

<pre><code>my @bottomfive = @names &lt; 5 ? @names : @names[$#names-5..$#names];
</code></pre>

<p>Or this.</p>

<pre><code>my @names
        = map { $_-&gt;[0] }
        sort { $a-&gt;[1] &lt;=&gt; $b-&gt;[1] }
        grep { $_-&gt;[1] &gt; $now }
        map { [ $_-&gt;{name}, parse_date( $_-&gt;{birthday} ) ] }
        @all_users;
my @topfive = @names[0..4];
</code></pre>

<p>There&#39;s got to be a better way!</p>

<p><img alt="There&#39;s got to be a better way" src="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/cheetos-2.gif"></p>

<p>Now there is! Introducing: <a href="http://metacpan.org/pod/List::Slice">List::Slice</a>!</p>

                    <p><a href="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                    <a href="http://preaction.me/blog/tag/cpan/">cpan</a>
                </p>
            ]]></description>
            <pubDate>
                Mon, 26 Oct 2015 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Consuming Chaos</title>
            <link>http://preaction.me/blog/2015/03/08/consuming-chaos/</link>
            <guid>http://preaction.me/blog/2015/03/08/consuming-chaos/</guid>
            <description><![CDATA[
                <p><img class="u-pull-left" src="http://preaction.me/images/blog/chaos.jpg" style="width: 40%"></p>

<p>For what seems hours, you scan the board. The colors are sharp against the
simple background. Some movement catches your eye, but it doesn&#39;t feel right,
so you ignore it. Time stretches on.</p>

<p>There! The perfect move. Leaving the perfect next move. A quick flick. A match.
The pieces fall into place. Another match. Another. Another. A special piece.
Another special piece. It fires, triggering more. Chaos consumes.</p>

<p>The board is in ruins. Your carefully planned next move is lost in the
destruction. You&#39;re back to scanning the board to try to find where you belong
in this new world.</p>

<p>Is this a game, or is it your development strategy?</p>

<p>Software development is chaos. Either you work to managing chaos, consuming it,
or it works on consuming you. There are too many possibilities, too much input,
to brute-force your way to completion (how much software do you know of that
can be considered complete?).</p>

<p>In the face of these possibilities, a rigid development plan will fail. Vague
goals are better. Goals written in terms of a problem are best. Problems don&#39;t
change, once you find their roots.</p>

<p>I didn&#39;t know this post was going to be about Agile, but there it is.</p>

<p>Exact is for computers. We are not computers. We are human. We are chaos.</p>

                    <p><a href="http://preaction.me/blog/2015/03/08/consuming-chaos/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/software/">software</a>
                </p>
            ]]></description>
            <pubDate>
                Sun, 08 Mar 2015 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Announcing Statocles</title>
            <link>http://preaction.me/blog/2015/03/02/announcing-statocles/</link>
            <guid>http://preaction.me/blog/2015/03/02/announcing-statocles/</guid>
            <description><![CDATA[
                <p><a href="http://staticsitegenerators.net">Static site generators</a> are popular these
days. For small sites, the ability to quickly author content using simple tools
is key. The ability to use lower-cost (even free) hosting, often without any
dynamic capabilities, is good for trying to maintain a budget. For larger
sites, the ability to serve content quickly and cheaply is beneficial, and
since most pages are read far more often than they are written, generating a
full web page to store on the filesystem can improve performance (and lower
costs).</p>

<p>For me, I like the convenience of using <a href="http://pages.github.com">Github Pages</a>
to host project-oriented websites. The project itself is already on Github, so
why not keep the website closely tied to it so it doesn&#39;t get out-of-date? For
an organization like <a href="http://chicago.pm.org">the Chicago Perl Mongers</a>, Github
can even host custom domains, allowing easy collaboration on websites.</p>

<p>It&#39;s through the Chicago.PM website that I was introduced to Octopress, a
blogging engine built on Jekyll. It&#39;s through using Octopress that I decided to
write my own static site generator,
<a href="http://preaction.github.io/Statocles">Statocles</a>.</p>

                    <p><a href="http://preaction.me/blog/2015/03/02/announcing-statocles/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                    <a href="http://preaction.me/blog/tag/statocles/">statocles</a>
                </p>
            ]]></description>
            <pubDate>
                Mon, 02 Mar 2015 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Mojolicious Triumphs Over Legacy Code</title>
            <link>http://preaction.me/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html</link>
            <guid>http://preaction.me/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html</guid>
            <description><![CDATA[
                <p>I got a text at 8:00am:</p>

<blockquote>
  <p>&quot;Hey, can you jump on a conference call?&quot;</p>
</blockquote>

<p>Groggy and disoriented, I blearily type the conference line and enter my
passcode, followed by the pound or hash sign. At the tone, I would be the 6th
person to enter the conference. Tone.</p>

<blockquote>
  <p>&quot;The app is down, and trading has stopped.&quot;</p>
</blockquote>

                    <p><a href="http://preaction.me/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/mojolicious/">mojolicious</a>
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                </p>
            ]]></description>
            <pubDate>
                Fri, 13 Feb 2015 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

