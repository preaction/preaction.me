<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>preaction</title>
        <link>http://preaction.me/blog/</link>
        <atom:link href="http://preaction.me/blog/index.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of preaction</description>
        <generator>Statocles 0.083</generator>
        <item>
            <title>Timeout for Parallel::ForkManager</title>
            <link>http://preaction.me/blog/2017/04/14/timeout-for-parallel-forkmanager/</link>
            <guid>http://preaction.me/blog/2017/04/14/timeout-for-parallel-forkmanager/</guid>
            <description><![CDATA[
                <p>At <a href="https://www.meetup.com/ChicagoPM/events/239053113/">tonight&#39;s Chicago Perl Mongers Office
Hours</a>, Ray came up
with an interesting problem. While testing all of CPAN for <a href="http://www.cpantesters.org">CPAN
Testers</a>, how do you detect when a test is
hanging and kill it before it takes down the entire machine? How do you
simply kill a test that is taking too long? And how do you do it without
having a wholly separate watchdog program?</p>

<p>Ray&#39;s using
<a href="http://metacpan.org/pod/Parallel::ForkManager">Parallel::ForkManager</a>
to execute testing jobs in parallel across multiple Perl installs. There
are a few ways we could implement timeouts, including
<a href="http://metacpan.org/pod/IPC::Run">IPC::Run</a>&#39;s <code>timeout</code> function, or
the <a href="http://perldoc.perl.org/functions/alarm.html"><code>alarm</code></a> Perl
built-in, but these must all be implemented in the child process. It&#39;d
be nicer if we could use the parent process to watch its own children.</p>

                    <p><a href="http://preaction.me/blog/2017/04/14/timeout-for-parallel-forkmanager/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                    <a href="http://preaction.me/blog/tag/code/">code</a>
                </p>
            ]]></description>
            <pubDate>
                Fri, 14 Apr 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Choosing a Log Level</title>
            <link>http://preaction.me/blog/2017/03/27/choosing-a-log-level/</link>
            <guid>http://preaction.me/blog/2017/03/27/choosing-a-log-level/</guid>
            <description><![CDATA[
                <p>Like all subjective decisions in technology, which log level to use is
the cause of much angry debate. Worse, different logging systems use
different levels: <a href="https://en.wikipedia.org/wiki/Log4j#Log4j_log_levels">Log4j has 6 severity
levels</a>, and
<a href="https://en.wikipedia.org/wiki/Syslog#Severity_level">Syslog has 8 severity
levels</a>. While both
lists of log levels come with guidance as to which level to use when,
there&#39;s still enough ambiguity to cause confusion.</p>

<p>When choosing a log level, it&#39;s important to know how visible you want
the message to be, how big of a problem it is, and what you want the
user to do about it. With that in mind, this is the decision tree
I follow when choosing a log level:</p>

                    <p><a href="http://preaction.me/blog/2017/03/27/choosing-a-log-level/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/logging/">logging</a>
                </p>
            ]]></description>
            <pubDate>
                Mon, 27 Mar 2017 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>CPAN Testers Has a New API</title>
            <link>http://preaction.me/blog/2016/12/27/cpan-testers-has-a-new-api/</link>
            <guid>http://preaction.me/blog/2016/12/27/cpan-testers-has-a-new-api/</guid>
            <description><![CDATA[
                <p>As part of <a href="https://metacpan.org/about/meta_hack">the MetaCPAN hackathon,
meta::hack</a>, I was invited to work
on the CPAN Testers integration. <a href="http://cpantesters.org">CPAN Testers</a>
is a community of <a href="http://cpan.org">CPAN</a> users who send in test reports
for CPAN modules as they are uploaded. <a href="http://metacpan.org">MetaCPAN</a>
adds a summary of those test reports to every CPAN distribution to help
you determine which module you&#39;d most like to use. For quite a few
months, this integration was broken, and the nature of the current
integration (a SQLite database) means it is not as generally useful as
it could be.</p>

<p>So, I decided that the best way to improve the CPAN Testers / MetaCPAN
integration was to build a <a href="http://api.cpantesters.org">new CPAN Testers
API</a>. This API uses <a href="http://metacpan.org/pod/CPAN::Testers::Schema">the CPAN Testers
schema</a> to expose CPAN
Testers data using a JSON API. This API is built using <a href="http://mojolicious.org">the Mojolicious
web framework</a>, and an <a href="http://openapis.org">OpenAPI
specification</a> (using
<a href="http://metacpan.org/pod/Mojolicious::Plugin::OpenAPI">Mojolicious::Plugin::OpenAPI</a>.</p>

                    <p><a href="http://preaction.me/blog/2016/12/27/cpan-testers-has-a-new-api/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                    <a href="http://preaction.me/blog/tag/cpantesters/">cpantesters</a>
                </p>
            ]]></description>
            <pubDate>
                Tue, 27 Dec 2016 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>ES6 for the Occasional JavaScript Programmer</title>
            <link>http://preaction.me/blog/2016/12/14/es6-for-the-occasional-javascript-programmer/</link>
            <guid>http://preaction.me/blog/2016/12/14/es6-for-the-occasional-javascript-programmer/</guid>
            <description><![CDATA[
                <p>A <a href="https://www.meetup.com/ChicagoPM/events/235316571/">few weeks ago I gave
a talk</a> for <a href="http://chicago.pm.org">the
Chicago Perl Mongers</a> called &quot;ES6 for the
JavaScript Irregular&quot;. A lot of developers are only occasional
JavaScript developers, and so may not be fully-informed on all the
latest developments in the JavaScript world. If this is you, you can
<a href="https://github.com/preaction/ES6-For-JS-Irregulars/blob/master/NOTES.md">read my notes on ECMAScript 6, the latest specification of JavaScript,
on my
Github</a>.</p>

                    <p><a href="http://preaction.me/blog/2016/12/14/es6-for-the-occasional-javascript-programmer/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/javascript/">javascript</a>
                </p>
            ]]></description>
            <pubDate>
                Wed, 14 Dec 2016 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Yuletide Logging</title>
            <link>http://preaction.me/blog/2016/12/04/yuletide-logging/</link>
            <guid>http://preaction.me/blog/2016/12/04/yuletide-logging/</guid>
            <description><![CDATA[
                <blockquote>
  <p>&#39;Twas a night before Christmas and on the ops floor <br>
  All the servers were humming behind the closed door <br>
  The app was deployed to the servers with care <br>
  In hopes that the customers soon would be there <br>
  When from out of the phone there arose such a clatter <br>
  I sprang out of my chair to see what was the matter <br>
  &quot;The website is down!&quot; said the boss with a shout <br>
  &quot;We need to make money, so figure it out!&quot; <br>
  I logged in to the server and looked all around <br>
  But the app had no logging; no reason was found <br>
  With no other choice, I called the developer <br>
  Who said &quot;just restart it, I&#39;m sure that&#39;ll fix &#39;er&quot; <br>
  I ran the right service, up the app came <br>
  Only to come down again and again <br>
  If there but was a way to know what was wrong <br>
  I could fix it for sure, but no logging was found</p>
</blockquote>

<p>Good logging is crucial for applications in production. In an emergency,
you will want it to be as easy as possible to track down problems when
they happen. With good logs you can ensure that minor bugs don&#39;t cause
major downtime and data loss problems. Good logs can help track down
security issues and can provide an auditable trail of changes to track
down who did what and when.</p>

<p><a href="http://metacpan.org/pod/Log::Any">Log::Any</a> is a lightweight, generic API built for interoperable
logging for <a href="http://cpan.org">CPAN</a> modules. Much like
<a href="http://dbi.perl.org">DBI</a> allows interoperable database interfaces,
<a href="http://metacpan.org/pod/CHI">CHI</a> allows interoperable caching
interfaces, and <a href="http://plackperl.org">PSGI</a> allows interoperable web
applications, Log::Any allows a CPAN module to produce logs that fit
into your environment whether you just want to see logs on your
terminal, you&#39;re using <a href="http://mschilli.github.io/log4perl/">Log4perl</a>
to directly send e-mail alerts to your operations team, or you&#39;re using
a local <a href="http://www.rsyslog.com">rsyslog</a> daemon to transmit logs to an
<a href="https://www.elastic.co/products/elasticsearch">ElasticSearch</a> instance
via <a href="https://www.elastic.co/products/logstash">Logstash</a>.</p>

                    <p><a href="http://preaction.me/blog/2016/12/04/yuletide-logging/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                    <a href="http://preaction.me/blog/tag/logging/">logging</a>
                </p>
            ]]></description>
            <pubDate>
                Sun, 04 Dec 2016 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

