<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.me/blog/</id>
    <title>preaction</title>
    <updated>2017-05-20T00:00:00Z</updated>
    <link href="http://preaction.me/blog/index.atom" rel="self" />
    <link href="http://preaction.me/blog/" rel="alternate" />
    <generator version="0.083">Statocles</generator>
    <entry>
        <id>http://preaction.me/blog/2017/05/20/2017-perl-toolchain-summit/</id>
        <title>2017 Perl Toolchain Summit</title>
        <link href="http://preaction.me/blog/2017/05/20/2017-perl-toolchain-summit/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>This year I had one goal for <a href="http://cpantesters.org">CPAN Testers</a>:
Replace the current <a href="http://metabase.cpantesters.org">Metabase API</a> with
a new API that did not write to Amazon SimpleDB. The current
high-availability database that raw incoming test reports are written is
Amazon SimpleDB behind an API called Metabase.
<a href="http://metacpan.org/pod/Metabase">Metabase</a> is a highly-flexible data
storage API designed to work with massive, unstructured data sets and
still allow for sane organization and storage of data. Unfortunately,
Amazon SimpleDB is as it says on the tin: Simple. Worse, it&#39;s expensive:
Like most Amazon services, it charges for usage, so there&#39;s a huge
incentive for CPAN Testers to use it as little as possible (which made
some of the code quite obtuse).</p>

<p>So, I made a plan to excise the Metabase. Since we already cached every
raw test report locally in the CPAN Testers MySQL database, I planned to
write a new Metabase API that wrote directly to the cache, and then
adjust the backend processing to read from the cache. I spent the better
part of a month working through all the Metabase APIs, how the data was
stored in the database, and how to translate between a simple JSON
format and the serialized Metabase objects. However, some proper schema
design prevented me from finishing this project: A single <code>NOT NULL</code>
column could not be changed to allow nulls very easily, it being a 600GB
table. The one time where a well-designed schema was a bad thing!</p>

<p>But then <a href="https://github.com/garu">Garu</a>, author of
<a href="https://metacpan.org/pod/cpanm-reporter">cpanm-reporter</a> and
<a href="https://metacpan.org/pod/CPAN::Testers::Common::Client">CPAN::Testers::Common::Client</a>
came up with an idea to make a new test report format. These new reports
would have to be stored in a new place, and I discovered that <a href="https://dev.mysql.com/doc/refman/5.7/en/json.html">MySQL had
recently started building some rich JSON
tooling</a>. Making
a new JSON test report format and storing it in our new
high-availability MySQL cluster seemed like a perfect solution for
storing our raw test reports.</p>

<p>After a few weeks of discussion, I finally realized that it would be an
easier task to make a backwards-compatible Metabase API write to the new
test report MySQL table, even though it increased the amount of work
that needed to be done:</p>

<ul>
<li>Complete the new test report format schema (Garu)</li>
<li>Write the new backwards-compatibility Metabase API (Me)</li>
<li>Write a new test report processor that writes to the old Metabase
cache tables (Joel Berger)</li>
<li>Write a migration script from the old Metabase cache tables to the new
test report JSON object (?)</li>
</ul>

<p>With that plan, I headed for Lyon.</p>

                <p><a href="http://preaction.me/blog/2017/05/20/2017-perl-toolchain-summit/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/cpantesters/">cpantesters</a>
            </p>
        ]]></content>
        <updated>2017-05-20T00:00:00Z</updated>
        <category term="perl" />
        <category term="cpantesters" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2017/04/23/nerds-rejecting-nerds/</id>
        <title>Nerds Rejecting Nerds</title>
        <link href="http://preaction.me/blog/2017/04/23/nerds-rejecting-nerds/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="https://medium.com/@maradydd/when-nerds-collide-31895b01e68c">https://medium.com/@maradydd/when-nerds-collide-31895b01e68c</a></p>

<p>I was linked to this article after a discussion that was triggered by
a Tweet: <a href="https://twitter.com/shadowcat_mst/status/852265380156510214">https://twitter.com/shadowcat_mst/status/852265380156510214</a></p>

<p>In this article, the author describes a group called &quot;weird nerds&quot;,
later renamed &quot;hackers&quot;, and goes through some of the reasons why this
group is rejecting new members of their community (namely &quot;brogrammers&quot;
and &quot;geek feminists&quot;, a false equivalence if ever there was one).</p>

<p>As someone who fits the author&#39;s idea of a hacker (the classical
definition of hacker, not someone who breaks into computers), and yet
has never felt like part of the hacker community, there are a lot of
things in here that are bad, but I&#39;ll comment for now on a couple
quotes:</p>

                <p><a href="http://preaction.me/blog/2017/04/23/nerds-rejecting-nerds/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/community/">community</a>
                <a href="http://preaction.me/blog/tag/feminism/">feminism</a>
            </p>
        ]]></content>
        <updated>2017-04-23T00:00:00Z</updated>
        <category term="community" />
        <category term="feminism" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2017/04/14/timeout-for-parallel-forkmanager/</id>
        <title>Timeout for Parallel::ForkManager</title>
        <link href="http://preaction.me/blog/2017/04/14/timeout-for-parallel-forkmanager/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>At <a href="https://www.meetup.com/ChicagoPM/events/239053113/">tonight&#39;s Chicago Perl Mongers Office
Hours</a>, Ray came up
with an interesting problem. While testing all of CPAN for <a href="http://www.cpantesters.org">CPAN
Testers</a>, how do you detect when a test is
hanging and kill it before it takes down the entire machine? How do you
simply kill a test that is taking too long? And how do you do it without
having a wholly separate watchdog program?</p>

<p>Ray&#39;s using
<a href="http://metacpan.org/pod/Parallel::ForkManager">Parallel::ForkManager</a>
to execute testing jobs in parallel across multiple Perl installs. There
are a few ways we could implement timeouts, including
<a href="http://metacpan.org/pod/IPC::Run">IPC::Run</a>&#39;s <code>timeout</code> function, or
the <a href="http://perldoc.perl.org/functions/alarm.html"><code>alarm</code></a> Perl
built-in, but these must all be implemented in the child process. It&#39;d
be nicer if we could use the parent process to watch its own children.</p>

                <p><a href="http://preaction.me/blog/2017/04/14/timeout-for-parallel-forkmanager/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/code/">code</a>
            </p>
        ]]></content>
        <updated>2017-04-14T00:00:00Z</updated>
        <category term="perl" />
        <category term="code" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2017/03/27/choosing-a-log-level/</id>
        <title>Choosing a Log Level</title>
        <link href="http://preaction.me/blog/2017/03/27/choosing-a-log-level/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Like all subjective decisions in technology, which log level to use is
the cause of much angry debate. Worse, different logging systems use
different levels: <a href="https://en.wikipedia.org/wiki/Log4j#Log4j_log_levels">Log4j has 6 severity
levels</a>, and
<a href="https://en.wikipedia.org/wiki/Syslog#Severity_level">Syslog has 8 severity
levels</a>. While both
lists of log levels come with guidance as to which level to use when,
there&#39;s still enough ambiguity to cause confusion.</p>

<p>When choosing a log level, it&#39;s important to know how visible you want
the message to be, how big of a problem it is, and what you want the
user to do about it. With that in mind, this is the decision tree
I follow when choosing a log level:</p>

                <p><a href="http://preaction.me/blog/2017/03/27/choosing-a-log-level/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/logging/">logging</a>
            </p>
        ]]></content>
        <updated>2017-03-27T00:00:00Z</updated>
        <category term="logging" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2016/12/27/cpan-testers-has-a-new-api/</id>
        <title>CPAN Testers Has a New API</title>
        <link href="http://preaction.me/blog/2016/12/27/cpan-testers-has-a-new-api/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>As part of <a href="https://metacpan.org/about/meta_hack">the MetaCPAN hackathon,
meta::hack</a>, I was invited to work
on the CPAN Testers integration. <a href="http://cpantesters.org">CPAN Testers</a>
is a community of <a href="http://cpan.org">CPAN</a> users who send in test reports
for CPAN modules as they are uploaded. <a href="http://metacpan.org">MetaCPAN</a>
adds a summary of those test reports to every CPAN distribution to help
you determine which module you&#39;d most like to use. For quite a few
months, this integration was broken, and the nature of the current
integration (a SQLite database) means it is not as generally useful as
it could be.</p>

<p>So, I decided that the best way to improve the CPAN Testers / MetaCPAN
integration was to build a <a href="http://api.cpantesters.org">new CPAN Testers
API</a>. This API uses <a href="http://metacpan.org/pod/CPAN::Testers::Schema">the CPAN Testers
schema</a> to expose CPAN
Testers data using a JSON API. This API is built using <a href="http://mojolicious.org">the Mojolicious
web framework</a>, and an <a href="http://openapis.org">OpenAPI
specification</a> (using
<a href="http://metacpan.org/pod/Mojolicious::Plugin::OpenAPI">Mojolicious::Plugin::OpenAPI</a>.</p>

                <p><a href="http://preaction.me/blog/2016/12/27/cpan-testers-has-a-new-api/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/cpantesters/">cpantesters</a>
            </p>
        ]]></content>
        <updated>2016-12-27T00:00:00Z</updated>
        <category term="perl" />
        <category term="cpantesters" />
    </entry>
</feed>

