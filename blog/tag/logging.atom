<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.me/blog/tag/logging/</id>
    <title>preaction</title>
    <updated>2016-12-04T00:00:00Z</updated>
    <link href="http://preaction.me/blog/tag/logging.atom" rel="self" />
    <link href="http://preaction.me/blog/tag/logging/" rel="alternate" />
    <generator version="0.081">Statocles</generator>
    <entry>
        <id>http://preaction.me/blog/2016/12/04/yuletide-logging/</id>
        <title>Yuletide Logging</title>
        <link href="http://preaction.me/blog/2016/12/04/yuletide-logging/" rel="alternate" />
        <content type="html"><![CDATA[
            <blockquote>
  <p>&#39;Twas a night before Christmas and on the ops floor <br>
  All the servers were humming behind the closed door <br>
  The app was deployed to the servers with care <br>
  In hopes that the customers soon would be there <br>
  When from out of the phone there arose such a clatter <br>
  I sprang out of my chair to see what was the matter <br>
  &quot;The website is down!&quot; said the boss with a shout <br>
  &quot;We need to make money, so figure it out!&quot; <br>
  I logged in to the server and looked all around <br>
  But the app had no logging; no reason was found <br>
  With no other choice, I called the developer <br>
  Who said &quot;just restart it, I&#39;m sure that&#39;ll fix &#39;er&quot; <br>
  I ran the right service, up the app came <br>
  Only to come down again and again <br>
  If there but was a way to know what was wrong <br>
  I could fix it for sure, but no logging was found</p>
</blockquote>

<p>Good logging is crucial for applications in production. In an emergency,
you will want it to be as easy as possible to track down problems when
they happen. With good logs you can ensure that minor bugs don&#39;t cause
major downtime and data loss problems. Good logs can help track down
security issues and can provide an auditable trail of changes to track
down who did what and when.</p>

<p><a href="http://metacpan.org/pod/Log::Any">Log::Any</a> is a lightweight, generic API built for interoperable
logging for <a href="http://cpan.org">CPAN</a> modules. Much like
<a href="http://dbi.perl.org">DBI</a> allows interoperable database interfaces,
<a href="http://metacpan.org/pod/CHI">CHI</a> allows interoperable caching
interfaces, and <a href="http://plackperl.org">PSGI</a> allows interoperable web
applications, Log::Any allows a CPAN module to produce logs that fit
into your environment whether you just want to see logs on your
terminal, you&#39;re using <a href="http://mschilli.github.io/log4perl/">Log4perl</a>
to directly send e-mail alerts to your operations team, or you&#39;re using
a local <a href="http://www.rsyslog.com">rsyslog</a> daemon to transmit logs to an
<a href="https://www.elastic.co/products/elasticsearch">ElasticSearch</a> instance
via <a href="https://www.elastic.co/products/logstash">Logstash</a>.</p>

                <p><a href="http://preaction.me/blog/2016/12/04/yuletide-logging/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/logging/">logging</a>
            </p>
        ]]></content>
        <updated>2016-12-04T00:00:00Z</updated>
        <category term="perl" />
        <category term="logging" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2016/11/06/log-any-1-044-trial-released/</id>
        <title>Log::Any 1.044 TRIAL released</title>
        <link href="http://preaction.me/blog/2016/11/06/log-any-1-044-trial-released/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>A <a href="https://metacpan.org/release/PREACTION/Log-Any-1.044-TRIAL">new trial of Log::Any (1.044) has been
released</a>.
This release has a couple changes that make Log::Any a bit more
predictable:</p>

<ul>
<li>Passing in objects to formatted log methods now handles objects that
overload stringify correctly. Previously, these objects would be given
to Data::Dumper, which violates object encapsulation. Thanks <a href="https://github.com/mephinet">Philipp
Gortan (@mephinet)</a>!</li>
<li>The imported Log::Any object (<code>use Log::Any &#39;$log&#39;</code>) can now be named
anything (like <code>$LOG</code> or <code>$foo</code>).</li>
</ul>

<p>Since <a href="http://www.cpantesters.org">CPAN Testers</a> is still catching up
<a href="http://blog.cpantesters.org/diary/203">from its little bit of downtime a few weeks
ago</a>, I won&#39;t be releasing this
as stable until I get some success reports in. So, you&#39;ve got some time
to test this against your own codebase if you need to.  Please <a href="http://github.com/preaction/Log-Any/issues">report
any issues to the Log-Any Github
repository</a>.</p>

                <p><a href="http://preaction.me/blog/2016/11/06/log-any-1-044-trial-released/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/logging/">logging</a>
                <a href="http://preaction.me/blog/tag/cpan/">cpan</a>
            </p>
        ]]></content>
        <updated>2016-11-06T00:00:00Z</updated>
        <category term="perl" />
        <category term="logging" />
        <category term="cpan" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2016/08/27/log-any-1-042-released/</id>
        <title>Log::Any 1.042 Released</title>
        <link href="http://preaction.me/blog/2016/08/27/log-any-1-042-released/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Since <a href="http://cpantesters.org/distro/L/Log-Any.html">CPANTesters for Log-Any</a>
are all showing green for <a href="http://blogs.perl.org/users/preaction/2016/08/new-logany-trial-release-1041.html">last week&#39;s trial
release</a>,
I&#39;ve pushed a <a href="https://metacpan.org/release/PREACTION/Log-Any-1.042">new standard release of Log::Any 1.042 to
CPAN</a>.</p>

                <p><a href="http://preaction.me/blog/2016/08/27/log-any-1-042-released/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/logging/">logging</a>
            </p>
        ]]></content>
        <updated>2016-08-27T00:00:00Z</updated>
        <category term="perl" />
        <category term="logging" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2016/08/18/new-log-any-trial-release-1-041/</id>
        <title>New Log::Any Trial Release 1.041</title>
        <link href="http://preaction.me/blog/2016/08/18/new-log-any-trial-release-1-041/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>I&#39;ve just released a new <a href="http://metacpan.org/pod/Log::Any">Log::Any</a>
trial release. This release improves performance immensely when there
are no log output adapters configured. This release also now returns the
formatted log string from logging methods, allowing the log message to
be used by a <code>die</code> or <code>warn</code> call.</p>

<p>Because of these changes, there is a very small chance of an
incompatibility: Log::Any logging methods used to return whatever the
configured adapter returned (this was undocumented and was not
a feature). Now they always return the formatted log message.</p>

<p>So if you depend on Log::Any, please give
<a href="http://www.cpan.org/authors/id/P/PR/PREACTION/Log-Any-1.041-TRIAL.tar.gz">Log-Any-1.041-TRIAL</a>
a test run through and report any issues to <a href="http://github.com/preaction/Log-Any/issues">the Log-Any Github
tracker</a>.</p>

                <p><a href="http://preaction.me/blog/2016/08/18/new-log-any-trial-release-1-041/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/logging/">logging</a>
                <a href="http://preaction.me/blog/tag/cpan/">cpan</a>
            </p>
        ]]></content>
        <updated>2016-08-18T00:00:00Z</updated>
        <category term="perl" />
        <category term="logging" />
        <category term="cpan" />
    </entry>
</feed>

