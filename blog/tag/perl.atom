<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.me/blog/tag/perl/</id>
    <title>preaction</title>
    <updated>2016-01-28T20:39:13Z</updated>
    <link href="http://preaction.me/blog/tag/perl.atom" rel="self" />
    <link href="http://preaction.me/blog/tag/perl/" rel="alternate" />
    <generator version="0.066">Statocles</generator>
    <entry>
        <id>http://preaction.me/blog/2015/11/27/ygrok-parse-plain-text-into-data-structures/</id>
        <title>ygrok - Parse plain text into data structures</title>
        <link href="http://preaction.me/blog/2015/11/27/ygrok-parse-plain-text-into-data-structures/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>As a data warehouse, a significant part of my job involves log analysis.
Besides the standard root cause analysis, I need to verify database
writes, diagnose user access issues, and look for under-used (and
over-used) data sets. Additionally, my boss needs quarterly and yearly
reports for client billing, and some of our clients need usage reports
to identify data they might be paying for but not using (which we can
then shut off to reduce costs). This has recently become a popular space
for new solutions.</p>

<p>On the other side, as a sysadmin, I need to get other reports like how
all the machine&#39;s resources (CPU, memory, disk, network) are being used,
what processes are running on the machine and how those processes used
resources over time. This is basic monitoring, and there are lots of
solutions here, too. In the true Unix philosophy, there are command-line
programs to query every one of these, which write out text that I can
then parse.</p>

<p>In <a href="http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html">my previous post about
ysql</a>, I showed how
to use the <code>ysql</code> utility to read/write YAML documents to SQL databases.
Now, <a href="http://preaction.me/yertl">Yertl</a> has a <a href="http://preaction.me/yertl/pod/ygrok"><code>ygrok</code>
utility</a> to parse plain text into YAML documents.</p>

                <p><a href="http://preaction.me/blog/2015/11/27/ygrok-parse-plain-text-into-data-structures/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/yertl/">yertl</a>
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
            </p>
        ]]></content>
        <updated>2015-11-27T00:00:00Z</updated>
        <category term="yertl" />
        <category term="perl" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/</id>
        <title>List::Slice - Slice operations for lists</title>
        <link href="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>How many times have you needed to do this?</p>

<pre><code>my @found_names = grep { /^[A-D]/ } @all_names;
my @topfive = @found_names[0..4];
</code></pre>

<p>Or worse, this.</p>

<pre><code>my @topfive = ( grep { /^[A-D]/ } @all_names )[0..4];
</code></pre>

<p><img alt="There&#39;s got to be a better way" src="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/cheetos.gif"></p>

<p>Or this.</p>

<pre><code>my @bottomfive = @names &lt; 5 ? @names : @names[$#names-5..$#names];
</code></pre>

<p>Or this.</p>

<pre><code>my @names
        = map { $_-&gt;[0] }
        sort { $a-&gt;[1] &lt;=&gt; $b-&gt;[1] }
        grep { $_-&gt;[1] &gt; $now }
        map { [ $_-&gt;{name}, parse_date( $_-&gt;{birthday} ) ] }
        @all_users;
my @topfive = @names[0..4];
</code></pre>

<p>There&#39;s got to be a better way!</p>

<p><img alt="There&#39;s got to be a better way" src="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/cheetos-2.gif"></p>

<p>Now there is! Introducing: <a href="http://metacpan.org/pod/List::Slice">List::Slice</a>!</p>

                <p><a href="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/cpan/">cpan</a>
            </p>
        ]]></content>
        <updated>2015-10-26T00:00:00Z</updated>
        <category term="perl" />
        <category term="cpan" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2015/03/02/announcing-statocles/</id>
        <title>Announcing Statocles</title>
        <link href="http://preaction.me/blog/2015/03/02/announcing-statocles/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="http://staticsitegenerators.net">Static site generators</a> are popular these
days. For small sites, the ability to quickly author content using simple tools
is key. The ability to use lower-cost (even free) hosting, often without any
dynamic capabilities, is good for trying to maintain a budget. For larger
sites, the ability to serve content quickly and cheaply is beneficial, and
since most pages are read far more often than they are written, generating a
full web page to store on the filesystem can improve performance (and lower
costs).</p>

<p>For me, I like the convenience of using <a href="http://pages.github.com">Github Pages</a>
to host project-oriented websites. The project itself is already on Github, so
why not keep the website closely tied to it so it doesn&#39;t get out-of-date? For
an organization like <a href="http://chicago.pm.org">the Chicago Perl Mongers</a>, Github
can even host custom domains, allowing easy collaboration on websites.</p>

<p>It&#39;s through the Chicago.PM website that I was introduced to Octopress, a
blogging engine built on Jekyll. It&#39;s through using Octopress that I decided to
write my own static site generator,
<a href="http://preaction.github.io/Statocles">Statocles</a>.</p>

                <p><a href="http://preaction.me/blog/2015/03/02/announcing-statocles/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/statocles/">statocles</a>
            </p>
        ]]></content>
        <updated>2015-03-02T00:00:00Z</updated>
        <category term="perl" />
        <category term="statocles" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html</id>
        <title>Mojolicious Triumphs Over Legacy Code</title>
        <link href="http://preaction.me/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html" rel="alternate" />
        <content type="html"><![CDATA[
            <p>I got a text at 8:00am:</p>

<blockquote>
  <p>&quot;Hey, can you jump on a conference call?&quot;</p>
</blockquote>

<p>Groggy and disoriented, I blearily type the conference line and enter my
passcode, followed by the pound or hash sign. At the tone, I would be the 6th
person to enter the conference. Tone.</p>

<blockquote>
  <p>&quot;The app is down, and trading has stopped.&quot;</p>
</blockquote>

                <p><a href="http://preaction.me/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/mojolicious/">mojolicious</a>
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
            </p>
        ]]></content>
        <updated>2015-02-13T00:00:00Z</updated>
        <category term="mojolicious" />
        <category term="perl" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html</id>
        <title>Managing SQL Data with Yertl</title>
        <link href="http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="http://blogs.perl.org/users/preaction/2015/01/managing-sql-data-with-yertl.html">Originally posted on blogs.perl.org -- Managing SQL Data with
Yertl</a></p>

<p>Every week, I work with about a dozen SQL databases. Some are Sybase, some
MySQL, some SQLite. Some have different versions in dev, staging, and
production. All of them need data extracted, transformed, and loaded.</p>

<p>DBI is the clear choice for dealing with SQL databases in Perl, but there are a
dozen lines of Perl code in between me and the operation that I want. Sure,
I&#39;ve got modules and web applications and ad-hoc commands and scripts that
perform certain individual tasks on my databases, but sometimes those things
don&#39;t quite do what I need right now, and I just want something that will let
me execute whatever SQL I can come up with.</p>

<p><a href="http://metacpan.org/pod/ETL::Yertl">Yertl (ETL::Yertl)</a> is a shell-based ETL
framework. It&#39;s under development (as is all software), but included already is
a small utility called <a href="http://metacpan.org/pod/ysql">ysql</a> to make dealing
with SQL databases easy.</p>

                <p><a href="http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/sql/">sql</a>
                <a href="http://preaction.me/blog/tag/etl/">etl</a>
                <a href="http://preaction.me/blog/tag/yertl/">yertl</a>
            </p>
        ]]></content>
        <updated>2015-01-21T00:00:00Z</updated>
        <category term="perl" />
        <category term="sql" />
        <category term="etl" />
        <category term="yertl" />
    </entry>
</feed>

