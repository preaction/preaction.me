<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.me/blog/tag/perl/</id>
    <title>preaction</title>
    <updated>2017-04-14T00:00:00Z</updated>
    <link href="http://preaction.me/blog/tag/perl.atom" rel="self" />
    <link href="http://preaction.me/blog/tag/perl/" rel="alternate" />
    <generator version="0.083">Statocles</generator>
    <entry>
        <id>http://preaction.me/blog/2017/04/14/timeout-for-parallel-forkmanager/</id>
        <title>Timeout for Parallel::ForkManager</title>
        <link href="http://preaction.me/blog/2017/04/14/timeout-for-parallel-forkmanager/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>At <a href="https://www.meetup.com/ChicagoPM/events/239053113/">tonight&#39;s Chicago Perl Mongers Office
Hours</a>, Ray came up
with an interesting problem. While testing all of CPAN for <a href="http://www.cpantesters.org">CPAN
Testers</a>, how do you detect when a test is
hanging and kill it before it takes down the entire machine? How do you
simply kill a test that is taking too long? And how do you do it without
having a wholly separate watchdog program?</p>

<p>Ray&#39;s using
<a href="http://metacpan.org/pod/Parallel::ForkManager">Parallel::ForkManager</a>
to execute testing jobs in parallel across multiple Perl installs. There
are a few ways we could implement timeouts, including
<a href="http://metacpan.org/pod/IPC::Run">IPC::Run</a>&#39;s <code>timeout</code> function, or
the <a href="http://perldoc.perl.org/functions/alarm.html"><code>alarm</code></a> Perl
built-in, but these must all be implemented in the child process. It&#39;d
be nicer if we could use the parent process to watch its own children.</p>

                <p><a href="http://preaction.me/blog/2017/04/14/timeout-for-parallel-forkmanager/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/code/">code</a>
            </p>
        ]]></content>
        <updated>2017-04-14T00:00:00Z</updated>
        <category term="perl" />
        <category term="code" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2016/12/27/cpan-testers-has-a-new-api/</id>
        <title>CPAN Testers Has a New API</title>
        <link href="http://preaction.me/blog/2016/12/27/cpan-testers-has-a-new-api/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>As part of <a href="https://metacpan.org/about/meta_hack">the MetaCPAN hackathon,
meta::hack</a>, I was invited to work
on the CPAN Testers integration. <a href="http://cpantesters.org">CPAN Testers</a>
is a community of <a href="http://cpan.org">CPAN</a> users who send in test reports
for CPAN modules as they are uploaded. <a href="http://metacpan.org">MetaCPAN</a>
adds a summary of those test reports to every CPAN distribution to help
you determine which module you&#39;d most like to use. For quite a few
months, this integration was broken, and the nature of the current
integration (a SQLite database) means it is not as generally useful as
it could be.</p>

<p>So, I decided that the best way to improve the CPAN Testers / MetaCPAN
integration was to build a <a href="http://api.cpantesters.org">new CPAN Testers
API</a>. This API uses <a href="http://metacpan.org/pod/CPAN::Testers::Schema">the CPAN Testers
schema</a> to expose CPAN
Testers data using a JSON API. This API is built using <a href="http://mojolicious.org">the Mojolicious
web framework</a>, and an <a href="http://openapis.org">OpenAPI
specification</a> (using
<a href="http://metacpan.org/pod/Mojolicious::Plugin::OpenAPI">Mojolicious::Plugin::OpenAPI</a>.</p>

                <p><a href="http://preaction.me/blog/2016/12/27/cpan-testers-has-a-new-api/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/cpantesters/">cpantesters</a>
            </p>
        ]]></content>
        <updated>2016-12-27T00:00:00Z</updated>
        <category term="perl" />
        <category term="cpantesters" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2016/12/04/yuletide-logging/</id>
        <title>Yuletide Logging</title>
        <link href="http://preaction.me/blog/2016/12/04/yuletide-logging/" rel="alternate" />
        <content type="html"><![CDATA[
            <blockquote>
  <p>&#39;Twas a night before Christmas and on the ops floor <br>
  All the servers were humming behind the closed door <br>
  The app was deployed to the servers with care <br>
  In hopes that the customers soon would be there <br>
  When from out of the phone there arose such a clatter <br>
  I sprang out of my chair to see what was the matter <br>
  &quot;The website is down!&quot; said the boss with a shout <br>
  &quot;We need to make money, so figure it out!&quot; <br>
  I logged in to the server and looked all around <br>
  But the app had no logging; no reason was found <br>
  With no other choice, I called the developer <br>
  Who said &quot;just restart it, I&#39;m sure that&#39;ll fix &#39;er&quot; <br>
  I ran the right service, up the app came <br>
  Only to come down again and again <br>
  If there but was a way to know what was wrong <br>
  I could fix it for sure, but no logging was found</p>
</blockquote>

<p>Good logging is crucial for applications in production. In an emergency,
you will want it to be as easy as possible to track down problems when
they happen. With good logs you can ensure that minor bugs don&#39;t cause
major downtime and data loss problems. Good logs can help track down
security issues and can provide an auditable trail of changes to track
down who did what and when.</p>

<p><a href="http://metacpan.org/pod/Log::Any">Log::Any</a> is a lightweight, generic API built for interoperable
logging for <a href="http://cpan.org">CPAN</a> modules. Much like
<a href="http://dbi.perl.org">DBI</a> allows interoperable database interfaces,
<a href="http://metacpan.org/pod/CHI">CHI</a> allows interoperable caching
interfaces, and <a href="http://plackperl.org">PSGI</a> allows interoperable web
applications, Log::Any allows a CPAN module to produce logs that fit
into your environment whether you just want to see logs on your
terminal, you&#39;re using <a href="http://mschilli.github.io/log4perl/">Log4perl</a>
to directly send e-mail alerts to your operations team, or you&#39;re using
a local <a href="http://www.rsyslog.com">rsyslog</a> daemon to transmit logs to an
<a href="https://www.elastic.co/products/elasticsearch">ElasticSearch</a> instance
via <a href="https://www.elastic.co/products/logstash">Logstash</a>.</p>

                <p><a href="http://preaction.me/blog/2016/12/04/yuletide-logging/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/logging/">logging</a>
            </p>
        ]]></content>
        <updated>2016-12-04T00:00:00Z</updated>
        <category term="perl" />
        <category term="logging" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2016/11/25/meta-hack-log/</id>
        <title>meta::hack log</title>
        <link href="http://preaction.me/blog/2016/11/25/meta-hack-log/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Last week, I attended meta::hack, the <a href="http://metacpan.org">MetaCPAN</a> hackathon
in Chicago. I&#39;m the maintainer for <a href="http://cpantesters.org">CPAN Testers</a>, the
central database for CPAN users to send in test reports on CPAN distributions
and one of MetaCPAN&#39;s data sources. I asked to join them so I could improve how
MetaCPAN consumes CPAN Testers data, and ensure the stability and reliability
of that consumption.</p>

<p>Here&#39;s a detailed log of what I was able to accomplish, and information on the
new development of CPAN Testers.</p>

                <p><a href="http://preaction.me/blog/2016/11/25/meta-hack-log/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/cpantesters/">cpantesters</a>
            </p>
        ]]></content>
        <updated>2016-11-25T00:00:00Z</updated>
        <category term="perl" />
        <category term="cpantesters" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2016/11/18/beam-emitter-v1-004-released/</id>
        <title>Beam::Emitter v1.004 released</title>
        <link href="http://preaction.me/blog/2016/11/18/beam-emitter-v1-004-released/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>This week, I released a new version of
<a href="http://metacpan.org/pod/Beam::Emitter">Beam::Emitter</a>. A lot has changed since
the first releases, so here&#39;s some details on all the new features.</p>

<p>Beam::Emitter is a role for turning your classes into event emitters. Being an
event emitter allows other classes to subscribe to important events from your
object. Subscribers can use these events to perform additional tasks, transform
your object&#39;s data, or otherwise extend and enhance your class. Beam::Emitter
makes your class extensible by allowing you to provide specific places for
custom code to run.</p>

<p>Since the 1.000 release last year, Beam::Emitter has gotten quite a few new
features and bug fixes to make it easier to use and safer for your code.</p>

                <p><a href="http://preaction.me/blog/2016/11/18/beam-emitter-v1-004-released/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/beam/">beam</a>
            </p>
        ]]></content>
        <updated>2016-11-18T00:00:00Z</updated>
        <category term="perl" />
        <category term="beam" />
    </entry>
</feed>

