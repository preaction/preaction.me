<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.me/blog/tag/perl/</id>
    <title>preaction</title>
    <updated>2015-08-02T23:20:09Z</updated>
    <link href="http://preaction.me/blog/tag/perl.atom" rel="self" />
    <link href="http://preaction.me/blog/tag/perl/" rel="alternate" />
    <generator version="0.054">Statocles</generator>
    <entry>
        <id>http://preaction.me/blog/2015/03/02/announcing-statocles/</id>
        <title>Announcing Statocles</title>
        <link href="http://preaction.me/blog/2015/03/02/announcing-statocles/" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="http://staticsitegenerators.net">Static site generators</a> are popular these
days. For small sites, the ability to quickly author content using simple tools
is key. The ability to use lower-cost (even free) hosting, often without any
dynamic capabilities, is good for trying to maintain a budget. For larger
sites, the ability to serve content quickly and cheaply is beneficial, and
since most pages are read far more often than they are written, generating a
full web page to store on the filesystem can improve performance (and lower
costs).</p>

<p>For me, I like the convenience of using <a href="http://pages.github.com">Github Pages</a>
to host project-oriented websites. The project itself is already on Github, so
why not keep the website closely tied to it so it doesn&#39;t get out-of-date? For
an organization like <a href="http://chicago.pm.org">the Chicago Perl Mongers</a>, Github
can even host custom domains, allowing easy collaboration on websites.</p>

<p>It&#39;s through the Chicago.PM website that I was introduced to Octopress, a
blogging engine built on Jekyll. It&#39;s through using Octopress that I decided to
write my own static site generator,
<a href="http://preaction.github.io/Statocles">Statocles</a>.</p>

                <p><a href="http://preaction.me/blog/2015/03/02/announcing-statocles/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl/">perl</a>
                <a href="/blog/tag/statocles/">statocles</a>
            </p>
        ]]></content>
        <updated>2015-03-02T00:00:00Z</updated>
        <category term="perl" />
        <category term="statocles" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html</id>
        <title>Mojolicious Triumphs Over Legacy Code</title>
        <link href="http://preaction.me/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html" rel="alternate" />
        <content type="html"><![CDATA[
            <p>I got a text at 8:00am:</p>

<blockquote>
  <p>&quot;Hey, can you jump on a conference call?&quot;</p>
</blockquote>

<p>Groggy and disoriented, I blearily type the conference line and enter my
passcode, followed by the pound or hash sign. At the tone, I would be the 6th
person to enter the conference. Tone.</p>

<blockquote>
  <p>&quot;The app is down, and trading has stopped.&quot;</p>
</blockquote>

                <p><a href="http://preaction.me/blog/2015/02/13/mojolicious-triumphs-over-legacy-code.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/mojolicious/">mojolicious</a>
                <a href="/blog/tag/perl/">perl</a>
            </p>
        ]]></content>
        <updated>2015-02-13T00:00:00Z</updated>
        <category term="mojolicious" />
        <category term="perl" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html</id>
        <title>Managing SQL Data with Yertl</title>
        <link href="http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="http://blogs.perl.org/users/preaction/2015/01/managing-sql-data-with-yertl.html">Originally posted on blogs.perl.org -- Managing SQL Data with
Yertl</a></p>

<p>Every week, I work with about a dozen SQL databases. Some are Sybase, some
MySQL, some SQLite. Some have different versions in dev, staging, and
production. All of them need data extracted, transformed, and loaded.</p>

<p>DBI is the clear choice for dealing with SQL databases in Perl, but there are a
dozen lines of Perl code in between me and the operation that I want. Sure,
I&#39;ve got modules and web applications and ad-hoc commands and scripts that
perform certain individual tasks on my databases, but sometimes those things
don&#39;t quite do what I need right now, and I just want something that will let
me execute whatever SQL I can come up with.</p>

<p><a href="http://metacpan.org/pod/ETL::Yertl">Yertl (ETL::Yertl)</a> is a shell-based ETL
framework. It&#39;s under development (as is all software), but included already is
a small utility called <a href="http://metacpan.org/pod/ysql">ysql</a> to make dealing
with SQL databases easy.</p>

                <p><a href="http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="/blog/tag/perl/">perl</a>
                <a href="/blog/tag/sql/">sql</a>
                <a href="/blog/tag/etl/">etl</a>
                <a href="/blog/tag/yertl/">yertl</a>
            </p>
        ]]></content>
        <updated>2015-01-21T00:00:00Z</updated>
        <category term="perl" />
        <category term="sql" />
        <category term="etl" />
        <category term="yertl" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2014/10/26/managing-boilerplate-with-import-base.html</id>
        <title>Manage Boilerplate with Import::Base</title>
        <author><name>preaction</name></author>
        <link href="http://preaction.me/blog/2014/10/26/managing-boilerplate-with-import-base.html" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Boilerplate is everything I hate about programming:</p>

<ul>
<li>Doing the same thing more than once</li>
<li>Leaving clutter in every file</li>
<li>Making it harder to change things in the future</li>
<li>Eventually blindly copying without understanding (cargo-cult programming)</li>
</ul>

<p>In an effort to reduce some of my boilerplate, I wrote
<a href="https://metacpan.org/pod/Import::Base">Import::Base</a>, a module to collect and
import useful bundles of modules, removing the need for long lists of <code>use ...</code>
lines everywhere.</p>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/10/managing-boilerplate-with-importbase.html">
                        Continue reading <em>Manage Boilerplate with Import::Base</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.me/blog/2014/10/26/managing-boilerplate-with-import-base.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/perl/">perl</a>
            </p>
        ]]></content>
        <updated>2014-10-26T00:00:00Z</updated>
        <category term="perl" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2014/06/14/conflict-resolution-local--lib-and-gits-perl.html</id>
        <title>Conflict Resolution: local::lib and git&#39;s Perl</title>
        <author><name>preaction</name></author>
        <link href="http://preaction.me/blog/2014/06/14/conflict-resolution-local--lib-and-gits-perl.html" rel="alternate" />
        <content type="html"><![CDATA[
            <p>I ran into a frustrating problem the other day:</p>

<pre><code>$ git add -i
/usr/bin/perl: symbol lookup error: ~/perl5/lib/perl5/x86_64-linux-thread-multi/auto/List/Util/Util.so:
undefined symbol: Perl_xs_apiversion_bootcheck
fatal: &#39;add--interactive&#39; appears to be a git command, but we were not
able to execute it. Maybe git-add--interactive is broken?
</code></pre>

                <ul>
                    <li><a href="http://blogs.perl.org/users/preaction/2014/06/conflict-resolution-locallib-and-gits-perl.html">
                        Continue reading <em>Conflict Resolution: local::lib and git's Perl</em> on blogs.perl.org...
                    </a></li>
                    <li><a href="http://preaction.me/blog/2014/06/14/conflict-resolution-local--lib-and-gits-perl.html#section-2">
                        Continue reading on preaction
                    </a></li>
                </ul>
            <p>Tags:
                <a href="/blog/tag/perl/">perl</a>
                <a href="/blog/tag/git/">git</a>
            </p>
        ]]></content>
        <updated>2014-06-14T00:00:00Z</updated>
        <category term="perl" />
        <category term="git" />
    </entry>
</feed>

