<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://preaction.me/blog/tag/yertl/</id>
    <title>preaction</title>
    <updated>2017-10-18T00:00:00Z</updated>
    <link href="http://preaction.me/blog/tag/yertl.atom" rel="self" />
    <link href="http://preaction.me/blog/tag/yertl/" rel="alternate" />
    <generator version="0.085">Statocles</generator>
    <entry>
        <id>http://preaction.me/blog/2017/10/18/application-metrics-with-yertl/</id>
        <title>Application Metrics with Yertl</title>
        <link href="http://preaction.me/blog/2017/10/18/application-metrics-with-yertl/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>A time series database is a massively useful tool for system reporting
and monitoring. By storing series of simple values attached to
timestamps, an ops team can see how fast their application is
processing data, how much traffic they&#39;re serving, and how many
resources they&#39;re consuming. From this data they can determine how well
their application is working, track down issues in the system, and plan
for future resource needs.</p>

<p>There have been a lot of new databases and tools developed to create,
store, and consume time series data, and existing databases are being
enhanced to better support time series data.</p>

<p>With the new release of <a href="http://preaction.me/yertl">ETL::Yertl</a>, we can
easily translate SQL database queries into metrics for monitoring and
reporting. I&#39;ve been using these new features to monitor the <a href="http://cpantesters.org">CPAN
Testers</a> application.</p>

                <p><a href="http://preaction.me/blog/2017/10/18/application-metrics-with-yertl/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/yertl/">yertl</a>
                <a href="http://preaction.me/blog/tag/devops/">devops</a>
            </p>
        ]]></content>
        <updated>2017-10-18T00:00:00Z</updated>
        <category term="yertl" />
        <category term="devops" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2015/11/27/ygrok-parse-plain-text-into-data-structures/</id>
        <title>ygrok - Parse plain text into data structures</title>
        <link href="http://preaction.me/blog/2015/11/27/ygrok-parse-plain-text-into-data-structures/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>As a data warehouse, a significant part of my job involves log analysis.
Besides the standard root cause analysis, I need to verify database
writes, diagnose user access issues, and look for under-used (and
over-used) data sets. Additionally, my boss needs quarterly and yearly
reports for client billing, and some of our clients need usage reports
to identify data they might be paying for but not using (which we can
then shut off to reduce costs). This has recently become a popular space
for new solutions.</p>

<p>On the other side, as a sysadmin, I need to get other reports like how
all the machine&#39;s resources (CPU, memory, disk, network) are being used,
what processes are running on the machine and how those processes used
resources over time. This is basic monitoring, and there are lots of
solutions here, too. In the true Unix philosophy, there are command-line
programs to query every one of these, which write out text that I can
then parse.</p>

<p>In <a href="http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html">my previous post about
ysql</a>, I showed how
to use the <code>ysql</code> utility to read/write YAML documents to SQL databases.
Now, <a href="http://preaction.me/yertl">Yertl</a> has a <a href="http://preaction.me/yertl/pod/ygrok"><code>ygrok</code>
utility</a> to parse plain text into YAML documents.</p>

                <p><a href="http://preaction.me/blog/2015/11/27/ygrok-parse-plain-text-into-data-structures/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/yertl/">yertl</a>
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
            </p>
        ]]></content>
        <updated>2015-11-27T00:00:00Z</updated>
        <category term="yertl" />
        <category term="perl" />
    </entry>
    <entry>
        <id>http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html</id>
        <title>Managing SQL Data with Yertl</title>
        <link href="http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html" rel="alternate" />
        <content type="html"><![CDATA[
            <p><a href="http://blogs.perl.org/users/preaction/2015/01/managing-sql-data-with-yertl.html">Originally posted on blogs.perl.org -- Managing SQL Data with
Yertl</a></p>

<p>Every week, I work with about a dozen SQL databases. Some are Sybase, some
MySQL, some SQLite. Some have different versions in dev, staging, and
production. All of them need data extracted, transformed, and loaded.</p>

<p>DBI is the clear choice for dealing with SQL databases in Perl, but there are a
dozen lines of Perl code in between me and the operation that I want. Sure,
I&#39;ve got modules and web applications and ad-hoc commands and scripts that
perform certain individual tasks on my databases, but sometimes those things
don&#39;t quite do what I need right now, and I just want something that will let
me execute whatever SQL I can come up with.</p>

<p><a href="http://metacpan.org/pod/ETL::Yertl">Yertl (ETL::Yertl)</a> is a shell-based ETL
framework. It&#39;s under development (as is all software), but included already is
a small utility called <a href="http://metacpan.org/pod/ysql">ysql</a> to make dealing
with SQL databases easy.</p>

                <p><a href="http://preaction.me/blog/2015/01/21/managing-sql-data-with-yertl.html#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://preaction.me/blog/tag/perl/">perl</a>
                <a href="http://preaction.me/blog/tag/sql/">sql</a>
                <a href="http://preaction.me/blog/tag/etl/">etl</a>
                <a href="http://preaction.me/blog/tag/yertl/">yertl</a>
            </p>
        ]]></content>
        <updated>2015-01-21T00:00:00Z</updated>
        <category term="perl" />
        <category term="sql" />
        <category term="etl" />
        <category term="yertl" />
    </entry>
</feed>

