<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>preaction</title>
        <link>http://preaction.me/blog/tag/cpan/</link>
        <atom:link href="http://preaction.me/blog/tag/cpan.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of preaction</description>
        <generator>Statocles 0.093</generator>
        <item>
            <title>Log::Any 1.044 TRIAL released</title>
            <link>http://preaction.me/blog/2016/11/06/log-any-1-044-trial-released/</link>
            <guid>http://preaction.me/blog/2016/11/06/log-any-1-044-trial-released/</guid>
            <description><![CDATA[
                <p>A <a href="https://metacpan.org/release/PREACTION/Log-Any-1.044-TRIAL">new trial of Log::Any (1.044) has been
released</a>.
This release has a couple changes that make Log::Any a bit more
predictable:</p>

<ul>
<li>Passing in objects to formatted log methods now handles objects that
overload stringify correctly. Previously, these objects would be given
to Data::Dumper, which violates object encapsulation. Thanks <a href="https://github.com/mephinet">Philipp
Gortan (@mephinet)</a>!</li>
<li>The imported Log::Any object (<code>use Log::Any &#39;$log&#39;</code>) can now be named
anything (like <code>$LOG</code> or <code>$foo</code>).</li>
</ul>

<p>Since <a href="http://www.cpantesters.org">CPAN Testers</a> is still catching up
<a href="http://blog.cpantesters.org/diary/203">from its little bit of downtime a few weeks
ago</a>, I won&#39;t be releasing this
as stable until I get some success reports in. So, you&#39;ve got some time
to test this against your own codebase if you need to.  Please <a href="http://github.com/preaction/Log-Any/issues">report
any issues to the Log-Any Github
repository</a>.</p>

                    <p><a href="http://preaction.me/blog/2016/11/06/log-any-1-044-trial-released/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                    <a href="http://preaction.me/blog/tag/logging/">logging</a>
                    <a href="http://preaction.me/blog/tag/cpan/">cpan</a>
                </p>
            ]]></description>
            <pubDate>
                Sun, 06 Nov 2016 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>New Log::Any Trial Release 1.041</title>
            <link>http://preaction.me/blog/2016/08/18/new-log-any-trial-release-1-041/</link>
            <guid>http://preaction.me/blog/2016/08/18/new-log-any-trial-release-1-041/</guid>
            <description><![CDATA[
                <p>I&#39;ve just released a new <a href="http://metacpan.org/pod/Log::Any">Log::Any</a>
trial release. This release improves performance immensely when there
are no log output adapters configured. This release also now returns the
formatted log string from logging methods, allowing the log message to
be used by a <code>die</code> or <code>warn</code> call.</p>

<p>Because of these changes, there is a very small chance of an
incompatibility: Log::Any logging methods used to return whatever the
configured adapter returned (this was undocumented and was not
a feature). Now they always return the formatted log message.</p>

<p>So if you depend on Log::Any, please give
<a href="http://www.cpan.org/authors/id/P/PR/PREACTION/Log-Any-1.041-TRIAL.tar.gz">Log-Any-1.041-TRIAL</a>
a test run through and report any issues to <a href="http://github.com/preaction/Log-Any/issues">the Log-Any Github
tracker</a>.</p>

                    <p><a href="http://preaction.me/blog/2016/08/18/new-log-any-trial-release-1-041/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                    <a href="http://preaction.me/blog/tag/logging/">logging</a>
                    <a href="http://preaction.me/blog/tag/cpan/">cpan</a>
                </p>
            ]]></description>
            <pubDate>
                Thu, 18 Aug 2016 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>List::Slice - Slice operations for lists</title>
            <link>http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/</link>
            <guid>http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/</guid>
            <description><![CDATA[
                <p>How many times have you needed to do this?</p>

<pre><code>my @found_names = grep { /^[A-D]/ } @all_names;
my @topfive = @found_names[0..4];
</code></pre>

<p>Or worse, this.</p>

<pre><code>my @topfive = ( grep { /^[A-D]/ } @all_names )[0..4];
</code></pre>

<p><img alt="There&#39;s got to be a better way" src="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/cheetos.gif"></p>

<p>Or this.</p>

<pre><code>my @bottomfive = @names &lt; 5 ? @names : @names[$#names-5..$#names];
</code></pre>

<p>Or this.</p>

<pre><code>my @names
        = map { $_-&gt;[0] }
        sort { $a-&gt;[1] &lt;=&gt; $b-&gt;[1] }
        grep { $_-&gt;[1] &gt; $now }
        map { [ $_-&gt;{name}, parse_date( $_-&gt;{birthday} ) ] }
        @all_users;
my @topfive = @names[0..4];
</code></pre>

<p>There&#39;s got to be a better way!</p>

<p><img alt="There&#39;s got to be a better way" src="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/cheetos-2.gif"></p>

<p>Now there is! Introducing: <a href="http://metacpan.org/pod/List::Slice">List::Slice</a>!</p>

                    <p><a href="http://preaction.me/blog/2015/10/26/list-slice-slice-operations-for-lists/#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="http://preaction.me/blog/tag/perl/">perl</a>
                    <a href="http://preaction.me/blog/tag/cpan/">cpan</a>
                </p>
            ]]></description>
            <pubDate>
                Mon, 26 Oct 2015 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

